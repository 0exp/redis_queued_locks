use RedisClient as RC

module RedisQueuedLocks
  class Swarm
    module ZombieInfo
      type zombieInfo = { zombie_hosts: Set[String], zombie_acquirers: Set[String], zombie_locks: Set[String] }
      def self.zombies_info: (RC::client redis_client, Integer zombie_ttl, Integer lock_scan_size) -> zombieInfo

      type zombieLocks = Set[String]
      def self.zombie_locks: (RC::client redis_client, Integer zombie_ttl, Integer lock_scan_size) -> zombieLocks

      type zombieHosts = Set[String]
      def self.zombie_hosts: (RC::client redis_client, Integer zombie_ttl) -> zombieHosts

      type zombieAcquirers = Set[String]
      def self.zombie_acquirers: (RC::client redis_client, Integer zombie_ttl, Integer lock_scan_size) -> zombieAcquirers

      private def self.extract_zombie_hosts: (RC::client rconn, Integer zombie_ttl) -> zombieHosts
      private def self.extract_zombie_locks: (RC::client rconn, Integer zombie_ttl, Integer lock_scan_size) -> zombieLocks
      private def self.extract_zombie_acquirers: (RC::client rconn, Integer zombie_ttl, Integer lock_scan_size) -> zombieAcquirers
      private def self.extract_all: (RC::client rconn, Integer zombie_ttl, Integer lock_scan_size) -> zombieInfo
    end
  end
end
