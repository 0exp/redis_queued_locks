use RedisQueuedLocks as RQL

module RedisQueuedLocks
  class Swarm
    module SwarmElement
      class Threaded
        include RQL::Utilities

        @rql_client: RQL::Client
        @swarm_element: Thread?
        @main_loop: Thread?
        @swarm_element_commands: Thread::SizedQueue[Symbol]?
        @swarm_element_results: Thread::SizedQueue[{ ok: bool, result: Hash[untyped,untyped] }]?
        @sync: RQL::Utilities::Lock

        attr_reader rql_client: RQL::Client
        attr_reader swarm_element: Thread?
        attr_reader main_loop: Thread?
        attr_reader swarm_element_commands: Thread::SizedQueue[Symbol]?
        attr_reader swarm_element_results: Thread::SizedQueue[{ ok: bool, result: Hash[untyped,untyped] }]?
        attr_reader sync: RQL::Utilities::Lock

        def initialize: (RQL::Client rql_client) -> void

        def try_swarm!: () -> void
        def reswarm_if_dead!: () -> void
        def try_kill!: () -> void
        def enabled?: () -> bool

        type elementStatus = {
          enabled: bool,
          thread: { running: bool, state: String },
          main_loop: { running: bool, state: String }
        }
        def status: () -> elementStatus

        private

        def swarm!: () -> void
        def spawn_main_loop!: () -> Thread
        def idle?: () -> bool
        def swarmed?: () -> bool
        def swarmed__alive?: () -> bool
        def swarmed__dead?: () -> bool
        def swarmed__running?: () -> bool
        def terminating?: () -> bool?
        def swarmed__stopped?: () -> bool

        type swarmLoopIsActive = { ok: bool, result: { is_active: bool } }
        def swarm_loop__is_active: () -> swarmLoopIsActive?

        type swarmLoopStatus = { ok: bool, result: { main_loop: { alive: bool, state: String } } }
        def swarm_loop__status: () -> swarmLoopStatus?

        def swarm_loop__start: () -> void
        def swarm_loop__stop: () -> void
        def swarm_element__termiante: () -> void
      end
    end
  end
end
