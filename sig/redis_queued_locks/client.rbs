use RedisQueuedLocks as RQL
use RedisClient as RC

module RedisQueuedLocks
  class Client
    @config: RQL::Config
    @redis_client: RC::client
    @uniq_identity: String
    @swarm: RQL::Swarm

    attr_reader config: RQL::Config
    attr_reader redis_client: RC::client
    attr_accessor uniq_identity: String
    attr_reader swarm: RQL::Swarm

    def initialize: (RC::client redis_client) ?{ (RQL::Config) -> void } -> void
    def configure: () ?{ (RQL::Config) -> void } -> void

    def swarmize!: () -> RQL::Swarm::swarmizeResult
    def deswarmize!: () -> RQL::Swarm::deswarmizeResult
    def swarm_info: (?zombie_ttl: Integer) -> RQL::Swarm::Acquirers::acquirersList

    def swarm_status: () -> RQL::Swarm::swarmStatus
    alias swarm_state swarm_status

    def probe_hosts: () -> RQL::Swarm::ProbeHosts::livingHosts
    def flush_zombies: (?zombie_ttl: Integer, ?lock_scan_size: Integer, ?queue_scan_size: Integer) -> RQL::Swarm::FlushZombies::flushedZombies
    def zombie_locks: (?zombie_ttl: Integer, ?lock_scan_size: Integer) -> RQL::Swarm::ZombieInfo::zombieLocks
    def zombie_acquirers: (?zombie_ttl: Integer, ?lock_scan_size: Integer) -> RQL::Swarm::ZombieInfo::zombieAcquirers
    def zombie_hosts: (?zombie_ttl: Integer) -> RQL::Swarm::ZombieInfo::zombieHosts

    def zombies_info: (?zombie_ttl: Integer, ?lock_scan_size: Integer) -> RQL::Swarm::ZombieInfo::zombieInfo
    alias zombies zombies_info

    def lock: (
      String lock_name,
      ?ttl: Integer,
      ?queue_ttl: Integer,
      ?timeout: Integer?,
      ?timed: bool,
      ?retry_count: Integer?,
      ?retry_delay: Integer,
      ?retry_jitter: Integer,
      ?raise_errors: bool,
      ?fail_fast: bool,
      ?conflict_strategy: Symbol,
      ?read_write_mode: Symbol,
      ?access_strategy: Symbol,
      ?identity: String,
      ?meta: Hash[String|Symbol,untyped]?,
      ?detailed_acq_timeout_error: bool,
      ?logger: RQL::loggerObj,
      ?log_lock_try: bool,
      ?instrumenter: RQL::instrObj,
      ?instrument: untyped?,
      ?log_sampling_enabled: bool,
      ?log_sampling_percent: Integer,
      ?log_sampler: RQL::Logging::samplerObj,
      ?log_sample_this: bool,
      ?instr_sampling_enabled: bool,
      ?instr_sampling_percent: Integer,
      ?instr_sampler: RQL::Instrument::samplerObj,
      ?instr_sample_this: bool
    ) ?{ (?) -> untyped } -> RQL::Acquirer::AcquireLock::acquireResult

    def lock!: (
      String lock_name,
      ?ttl: Integer,
      ?queue_ttl: Integer,
      ?timeout: Integer?,
      ?timed: bool,
      ?retry_count: Integer?,
      ?retry_delay: Integer,
      ?retry_jitter: Integer,
      ?fail_fast: bool,
      ?conflict_strategy: Symbol,
      ?read_write_mode: Symbol,
      ?access_strategy: Symbol,
      ?identity: String,
      ?instrumenter: RQL::instrObj,
      ?meta: Hash[String|Symbol,untyped]?,
      ?detailed_acq_timeout_error: bool,
      ?logger: RQL::loggerObj,
      ?log_lock_try: bool,
      ?instrument: untyped?,
      ?log_sampling_enabled: bool,
      ?log_sampling_percent: Integer,
      ?log_sampler: RQL::Logging::samplerObj,
      ?log_sample_this: bool,
      ?instr_sampling_enabled: bool,
      ?instr_sampling_percent: Integer,
      ?instr_sampler: RQL::Instrument::samplerObj,
      ?instr_sample_this: bool,
    ) ?{ (?) -> untyped } -> RQL::Acquirer::AcquireLock::acquireResult

    def unlock: (
      String lock_name,
      ?logger: RQL::loggerObj,
      ?instrumenter: RQL::instrObj,
      ?instrument: untyped?,
      ?log_sampling_enabled: bool,
      ?log_sampling_percent: Integer,
      ?log_sampler: RQL::Logging::samplerObj,
      ?log_sample_this: bool,
      ?instr_sampling_enabled: bool,
      ?instr_sampling_percent: Integer,
      ?instr_sampler: RQL::Instrument::samplerObj,
      ?instr_sample_this: bool
    ) -> RQL::Acquirer::ReleaseLock::releaseResult
    alias release_lock unlock

    def locked?: (String lock_name) -> bool
    def queued?: (String lock_name) -> bool
    def lock_info: (String lock_name) -> RQL::Acquirer::LockInfo::lockInfo?
    def queue_info: (String lock_name) -> RQL::Acquirer::QueueInfo::queueInfo?

    def current_acquirer_id: (
      ?process_id: Integer|String,
      ?thread_id: Integer|String,
      ?fiber_id: Integer|String,
      ?ractor_id: Integer|String,
      ?identity: String
    ) -> String
    alias ccurrent_acq_id current_acquirer_id
    alias acq_id current_acquirer_id

    def current_host_id: (
      ?process_id: Integer|String,
      ?thread_id: Integer|String,
      ?ractor_id: Integer|String,
      ?identity: String
    ) -> String
    alias current_hst_id current_host_id
    alias hst_id current_host_id

    def possible_host_ids: (?String identity) -> Array[String]

    def extend_lock_ttl: (
      String lock_name,
      Integer milliseconds,
      ?logger: RQL::loggerObj,
      ?instrumenter: RQL::instrObj,
      ?instrument: untyped?,
      ?log_sampling_enabled: bool,
      ?log_sampling_percent: Integer,
      ?log_sampler: RQL::Logging::samplerObj,
      ?log_sample_this: bool,
      ?instr_sampling_enabled: bool,
      ?instr_sampling_percent: Integer,
      ?instr_sampler: RQL::Instrument::samplerObj,
      ?instr_sample_this: bool
    ) -> RQL::Acquirer::ExtendLockTTL::extendResult

    def clear_locks: (
      ?batch_size: Integer,
      ?logger: RQL::loggerObj,
      ?instrumenter: RQL::instrObj,
      ?instrument: untyped?,
      ?log_sampling_enabled: bool,
      ?log_sampling_percent: Integer,
      ?log_sampler: RQL::Logging::samplerObj,
      ?log_sample_this: bool,
      ?instr_sampling_enabled: bool,
      ?instr_sampling_percent: Integer,
      ?instr_sampler: RQL::Instrument::samplerObj,
      ?instr_sample_this: bool
    ) -> RQL::Acquirer::ReleaseAllLocks::releaseResult
    alias release_locks clear_locks

    def clear_locks_of: (
      host_id: String,
      acquirer_id: String,
      ?lock_scan_size: Integer,
      ?queue_scan_size: Integer,
      ?logger: RQL::loggerObj,
      ?instrumenter: RQL::instrObj,
      ?instrument: untyped?,
      ?log_sampling_enabled: bool,
      ?log_sampling_percent: Integer,
      ?log_sampler: RQL::Logging::samplerObj,
      ?log_sample_this: bool,
      ?instr_sampling_enabled: bool,
      ?instr_sampling_percent: Integer,
      ?instr_sampler: RQL::Instrument::samplerObj,
      ?instr_sample_this: bool
    ) -> RQL::Acquirer::ReleaseLocksOf::releaseResult
    alias release_locks_of clear_locks_of

    def clear_locks_of_host: (
      String host_id,
      ?lock_scan_size: Integer,
      ?queue_scan_size: Integer,
      ?queue_cleanup_cursor_count: Integer,
      ?logger: RQL::loggerObj,
      ?instrumenter: RQL::instrObj,
      ?instrument: untyped?,
      ?log_sampling_enabled: bool,
      ?log_sampling_percent: Integer,
      ?log_sampler: RQL::Logging::samplerObj,
      ?log_sample_this: bool,
      ?instr_sampling_enabled: bool,
      ?instr_sampling_percent: Integer,
      ?instr_sampler: RQL::Instrument::samplerObj,
      ?instr_sample_this: bool
    ) -> RQL::Acquirer::ReleaseLocksOfHost::releaseResult
    alias release_locks_of_host clear_locks_of_host

    def clear_locks_of_acquirer: (
      String acquirer_id,
      ?lock_scan_size: Integer,
      ?queue_scan_size: Integer,
      ?logger: RQL::loggerObj,
      ?instrumenter: RQL::instrObj,
      ?instrument: untyped?,
      ?log_sampling_enabled: bool,
      ?log_sampling_percent: Integer,
      ?log_sampler: RQL::Logging::samplerObj,
      ?log_sample_this: bool,
      ?instr_sampling_enabled: bool,
      ?instr_sampling_percent: Integer,
      ?instr_sampler: RQL::Instrument::samplerObj,
      ?instr_sample_this: bool
    ) -> RQL::Acquirer::ReleaseLocksOfHost::releaseResult
    alias release_locks_of_acquirer clear_locks_of_acquirer

    def clear_current_locks: (
      ?lock_scan_size: Integer,
      ?queue_scan_size: Integer,
      ?logger: RQL::loggerObj,
      ?instrumenter: RQL::instrObj,
      ?instrument: untyped?,
      ?log_sampling_enabled: bool,
      ?log_sampling_percent: Integer,
      ?log_sampler: RQL::Logging::samplerObj,
      ?log_sample_this: bool,
      ?instr_sampling_enabled: bool,
      ?instr_sampling_percent: Integer,
      ?instr_sampler: RQL::Instrument::samplerObj,
      ?instr_sample_this: bool
    ) -> RQL::Acquirer::ReleaseLocksOf::releaseResult
    alias release_current_locks clear_current_locks

    def locks: (?scan_size: Integer, ?with_info: bool) -> RQL::Acquirer::Locks::locks
             | (?scan_size: Integer, ?with_info: true) -> RQL::Acquirer::Locks::locksInfo
             | (?scan_size: Integer, ?with_info: false) -> RQL::Acquirer::Locks::lockList

    def locks_info: (?scan_size: Integer) -> RQL::Acquirer::Locks::locksInfo

    def queues: (?scan_size: Integer, ?with_info: bool) -> RQL::Acquirer::Queues::queues
              | (?scan_size: Integer, ?with_info: true) -> RQL::Acquirer::Queues::queuesInfo
              | (?scan_size: Integer, ?with_info: false) -> RQL::Acquirer::Queues::queueList

    def queues_info: (?scan_size: Integer) -> RQL::Acquirer::Queues::queues
    def keys: (?scan_size: Integer) -> RQL::Acquirer::Keys::keyList

    def clear_dead_requests: (
      ?dead_ttl: Integer,
      ?scan_size: Integer,
      ?logger: RQL::loggerObj,
      ?instrumenter: RQL::instrObj,
      ?instrument: untyped?,
      ?log_sampling_enabled: bool,
      ?log_sampling_percent: Integer,
      ?log_sampler: RQL::Logging::samplerObj,
      ?log_sample_this: bool,
      ?instr_sampling_enabled: bool,
      ?instr_sampling_percent: Integer,
      ?instr_sampler: RQL::Instrument::samplerObj,
      ?instr_sample_this: bool
    ) -> RQL::Acquirer::ClearDeadRequests::clearResult
  end
end
