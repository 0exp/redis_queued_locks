module RedisQueuedLocks
  class Swarm
    @rql_client: ::RedisQueuedLocks::Client
    @supervisor: ::RedisQueuedLocks::Swarm::Supervisor
    @probe_hosts_element: ::RedisQueuedLocks::Swarm::ProbeHosts
    @flush_zombies_element: ::RedisQueuedLocks::Swarm::FlushZombies
    @sync: ::RedisQueuedLocks::Utilities::Lock

    attr_reader rql_client: ::RedisQueuedLocks::Client
    attr_reader supervisor: ::RedisQueuedLocks::Swarm::Supervisor
    attr_reader probe_hosts_element: ::RedisQueuedLocks::Swarm::ProbeHosts
    attr_reader flush_zombies_element: ::RedisQueuedLocks::Swarm::FlushZombies
    attr_reader sync: ::RedisQueuedLocks::Utilities::Lock

    def initialize: (::RedisQueuedLocks::Client rql_client) -> void

    def swarm_status: () -> untyped
    def swarm_info: (?zombie_ttl: untyped) -> untyped
    def probe_hosts: () -> untyped
    def flush_zombies: (?zombie_ttl: untyped, ?lock_scan_size: untyped, ?queue_scan_size: untyped) -> untyped
    def zombie_locks: (?zombie_ttl: untyped, ?lock_scan_size: untyped) -> untyped
    def zombie_acquirers: (?zombie_ttl: untyped, ?lock_scan_size: untyped) -> untyped
    def zombie_hosts: (?zombie_ttl: untyped) -> untyped
    def zombies_info: (?zombie_ttl: untyped, ?lock_scan_size: untyped) -> untyped
    def swarm!: () -> untyped
    def deswarm!: () -> untyped
  end
end
