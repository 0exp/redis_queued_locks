use RedisQueuedLocks as RQL
use RedisClient as RC

module RedisQueuedLocks
  module Acquirer
    module AcquireLock
      module TryToLock
        EXTEND_LOCK_PTTL: String

        # { ok: bool, result: Symbol }
        # { ok: bool, result: Symbol }
        # {
        #   ok: bool,
        #   result: {
        #     process: Symbol,
        #     lock_key: String,
        #     acq_id: String,
        #     hst_id: String,
        #     ts: Integer?,
        #     ttl: Integer?
        #   }
        # }

        def try_to_lock: (
          RC::client redis,
          RQL::loggerObj logger,
          bool log_lock_try,
          String lock_key,
          String read_lock_key,
          String write_lock_key,
          RQL::Client::readWriteMode read_write_mode,
          String lock_key_queue,
          String read_lock_key_queue,
          String write_lock_key_queue,
          String read_lock_acq_list_key,
          String acquirer_id,
          String host_id,
          Integer|Float acquirer_position,
          Integer? ttl,
          Integer queue_ttl,
          bool fail_fast,
          Symbol conflict_strategy,
          Symbol access_strategy,
          Hash[String|Symbol,untyped]? meta,
          bool log_sampled,
          bool instr_sampled
        ) -> { ok: bool, result: Symbol|Hash[Symbol,untyped] }
      end
    end
  end
end
