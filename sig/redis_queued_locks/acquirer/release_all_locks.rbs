use RedisQueuedLocks as RQL
use RedisClient as RC

module RedisQueuedLocks
  module Acquirer
    module ReleaseAllLocks
      extend RQL::Utilities

      type releaseResult = { ok: bool, result: { rel_key_cnt: Integer, rel_time: Integer|Float } }
      def self.release_all_locks: (
        RC::client redis,
        Integer batch_size,
        RQL::loggerObj logger,
        RQL::instrObj instrumenter,
        untyped instrument,
        bool log_sampling_enabled,
        Integer log_sampling_percent,
        RQL::Logging::samplerObj log_sampler,
        bool log_sample_this,
        bool instr_sampling_enabled,
        Integer instr_sampling_percent,
        RQL::Instrument::samplerObj instr_sampler,
        bool instr_sample_this
      ) -> releaseResult

      type fullRelesaeResult = { ok: bool, result: { rel_key_cnt: Integer } }
      private def self.fully_release_all_locks: (RC::client redis, Integer batch_size) -> fullRelesaeResult
    end
  end
end
